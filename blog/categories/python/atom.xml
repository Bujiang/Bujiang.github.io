<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Bujiang's Blog]]></title>
  <link href="http://blog.bujiang.info/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.bujiang.info/"/>
  <updated>2014-08-13T00:30:46+08:00</updated>
  <id>http://blog.bujiang.info/</id>
  <author>
    <name><![CDATA[Yan Bujiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generate Alphabet Permutation in Python]]></title>
    <link href="http://blog.bujiang.info/blog/2014/08/12/generatre-alphabet-permutation-in-python/"/>
    <updated>2014-08-12T22:38:04+08:00</updated>
    <id>http://blog.bujiang.info/blog/2014/08/12/generatre-alphabet-permutation-in-python</id>
    <content type="html"><![CDATA[<p>Yesterday I&rsquo;ve find a loophole in my friends website, the API for mobile side registration does not have any human verification functions.
I decide to generate alphabet permutation list for user name and register fake users.</p>

<p>In python standard library have functions for iterators for efficient looping which name is itertools. The itertools have permutation generators.</p>

<p>The permutation function needs two arguments, one is iterable, another one is length like if the iterable is &ldquo;ABC&rdquo; and length is 2 then (A,B) (A,C) (B,A) (B,C) (C,A) (C,B) are results for this functions.
<code>python Generate permutation https://docs.python.org/2/library/itertools.html#itertools.permutations
import itertools
iterable = 'ABC'
length = 2
permutation = itertools.permutations(iterable, length)
permutation = list(permuation)
</code></p>

<p>After generate, inside the python list are tuples not string for user name. We need join alphabet within tuple together. Like (A,B) become &lsquo;AB&rsquo;</p>

<p>``` python
nameList = []                        #Create a empty list
for i in permutation:</p>

<pre><code>nameList.append(''.join(i))      #Join alphabet together and append in namList
</code></pre>

<p>```
The user name list are done, next is register user by use API. That API for registration use form-urlencoded. For simplicity, I decide just use curl construct special POST request.</p>

<p>``` python
TYPE = &ldquo;&lsquo;Content-Type:application/x-www-form-urlencoded&rsquo;&rdquo;
DEVICE = &ldquo; -d &lsquo;device_type=2&amp;user_name=&rdquo;
EMAIL = &ldquo;&amp;email=&rdquo;
EMAILTAIL = &ldquo;%40bujiang.info&amp;password=12345&amp;device_token=&rsquo;&rdquo;
URL = &ldquo; <a href="http://***********.com/*******api/index.php/v1/dp_auth/signup">http://***********.com/*******api/index.php/v1/dp_auth/signup</a>&rdquo;
COMMAND = &ldquo;curl -s -X POST -H &rdquo;</p>

<p>def execmd():</p>

<pre><code>if nameList:
    name = nameList.pop()    #Poped name use for username
    cmd = COMMAND + TYPE + DEVICE + name + EMAIL + name + EMAILTAIL + URL    #Construct command for different username registration
    os.system(cmd)    #Execute command in shell 
</code></pre>

<p>```</p>

<p>The code is modified from original code, original code use multithread for concurrent post request. Those asterisk in code URL for privacy reason.
Another loophole for this registration API is password in plaintext.</p>

<p>*: All test actions are under my friend authorization</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ptyhon Printing]]></title>
    <link href="http://blog.bujiang.info/blog/2014/07/23/ptyhon-printing/"/>
    <updated>2014-07-23T00:02:09+08:00</updated>
    <id>http://blog.bujiang.info/blog/2014/07/23/ptyhon-printing</id>
    <content type="html"><![CDATA[<p>``` python Fun printing</p>

<p>while True:</p>

<pre><code>for i in ["/", "-", "|", "\\", "|", "-"]:
    print "Loading [%s]\r\b" % i,
</code></pre>

<p>```
<iframe width="" height="" src="http://www.youtube.com/embed/q_XmtWG1E7c " frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python UTF-8]]></title>
    <link href="http://blog.bujiang.info/blog/2013/11/21/python-utf-8/"/>
    <updated>2013-11-21T12:09:00+08:00</updated>
    <id>http://blog.bujiang.info/blog/2013/11/21/python-utf-8</id>
    <content type="html"><![CDATA[<p>最近因为project的原因很频繁的需要处理本地数据和数据库及网页之间的转换
就碰到了挺多关于encoding和decoding的问题</p>

<p>涉及的操作系统平台包含Mac，Linux和Windows。软件是Python2.7（Django，pyserial）
为了保持字符编码的统一性，使用了UTF－8</p>

<p>但在转换成UTF－8的时候经常会有不符合UTF－8定义特殊的字符导致错误出现</p>

<p>其实可以这样方便的解决问题</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">encodeString</span> <span class="o">=</span> <span class="n">originString</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">latin</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python的类型判别]]></title>
    <link href="http://blog.bujiang.info/blog/2013/11/08/pythonde-lei-xing-pan-bie/"/>
    <updated>2013-11-08T10:42:00+08:00</updated>
    <id>http://blog.bujiang.info/blog/2013/11/08/pythonde-lei-xing-pan-bie</id>
    <content type="html"><![CDATA[<p>以前在Python里面判别类型会使用type()
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Check type by using type() </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="go">num = 6</span>
</span><span class='line'><span class="go">type(num)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其实还有isinstance()
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Check type by using isinstance() </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="go">line = u&#39;你好&#39;</span>
</span><span class='line'><span class="go">isinstance(line, unicode)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>甚至还能这样使用 isinstance(line, (unicode, str))</p>

<p>因为最近在开发网站所以会经常碰到unicode的问题所以还蛮频繁的需要检查类型</p>
]]></content>
  </entry>
  
</feed>
