<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Bujiang's Blog]]></title>
  <link href="http://blog.bujiang.info/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.bujiang.info/"/>
  <updated>2014-08-23T15:39:39+08:00</updated>
  <id>http://blog.bujiang.info/</id>
  <author>
    <name><![CDATA[Yan Bujiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Challenge 4]]></title>
    <link href="http://blog.bujiang.info/blog/2014/08/23/python-challenge-4/"/>
    <updated>2014-08-23T12:58:39+08:00</updated>
    <id>http://blog.bujiang.info/blog/2014/08/23/python-challenge-4</id>
    <content type="html"><![CDATA[<p>Challenge 4. <a href="http://www.pythonchallenge.com/pc/def/linkedlist.html">linkedlist</a></p>

<p>Open the resolved url in browser, it shows linkedlist.php.</p>

<p>Finish loading <a href="http://www.pythonchallenge.com/pc/def/linkedlist.php">http://www.pythonchallenge.com/pc/def/linkedlist.php</a> there only lefe one picture.
As before, I check the page source code and find a new link <a href="http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345">http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=12345</a>. I just try open the new url, and the page dispaly &ldquo;and the next nothing is 44827&rdquo;.
It seems need me to automate recursive open url by using python.</p>

<p>``` python
import urllib2, re</p>

<p>url = &ldquo;<a href="http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=">http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=</a>&rdquo;
nothingValue = &ldquo;12345&rdquo;
digis = &ldquo;\d+&rdquo;</p>

<p>data = urllib2.urlopen(url + nothingValue).read()
print data
finding = re.search(digis, data)</p>

<p>while finding.group(0):</p>

<pre><code>nothingValue = finding.group(0)
data = urllib2.urlopen(url + nothingValue).read()
print data
finding = re.search(digis, data)
</code></pre>

<p>print data
```</p>

<p>Above code will find the digitals in webpage and use the finding digitals to do a new request.</p>

<p>``` bash
&hellip;&hellip;&hellip;&hellip;.
and the next nothing is 29247
and the next nothing is 13115
and the next nothing is 23053
and the next nothing is 3875
and the next nothing is 16044
Yes. Divide by two and keep going.
Traceback (most recent call last):
  File &ldquo;bu.py&rdquo;, line 11, in <module></p>

<pre><code>while finding.group(0):
</code></pre>

<p>AttributeError: &lsquo;NoneType&rsquo; object has no attribute &lsquo;group&rsquo;
<code>
After run a while, the last printed line shows none digitals "Divide by two and keep going" By divide 16044 with 2 get 8022, then modify nothingValue in script then continue run.
</code> bash
&hellip;&hellip;&hellip;&hellip;..
and the next nothing is 49574
and the next nothing is 82682
There maybe misleading numbers in the
text. One example is 82683. Look only for the next nothing and the next nothing is 63579
You&rsquo;ve been misleaded to here. Go to previous
one and check.
Traceback (most recent call last):
  File &ldquo;bu.py&rdquo;, line 11, in <module></p>

<pre><code>while finding.group(0):
</code></pre>

<p>AttributeError: &lsquo;NoneType&rsquo; object has no attribute &lsquo;group&rsquo;
<code>
But still got some problem here, it tells "One example is 82683...." I've search print statement history but can't find it.
I continue modify the nothingValue to 63579 and re-run again.
</code> bash
and the next nothing is 27709
and the next nothing is 96791
and the next nothing is 75635
and the next nothing is 52899
and the next nothing is 66831
peak.html
Traceback (most recent call last):
  File &ldquo;bu.py&rdquo;, line 11, in <module></p>

<pre><code>while finding.group(0):
</code></pre>

<p>AttributeError: &lsquo;NoneType&rsquo; object has no attribute &lsquo;group&rsquo;
```
It seems OK here. I get peak.html  :)
So next challenge is <a href="http://www.pythonchallenge.com/pc/def/peak.html">http://www.pythonchallenge.com/pc/def/peak.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Challenge 3]]></title>
    <link href="http://blog.bujiang.info/blog/2014/08/20/python-challenge-3/"/>
    <updated>2014-08-20T00:10:44+08:00</updated>
    <id>http://blog.bujiang.info/blog/2014/08/20/python-challenge-3</id>
    <content type="html"><![CDATA[<p>Challenge 3. <a href="http://www.pythonchallenge.com/pc/def/equality.html">re</a></p>

<p>Like previous challenge, this challenge contains one picture and one pargraph.
<blockquote><p>One small letter, surrounded by EXACTLY three big bodyguards on each of its sides.</p></blockquote></p>

<p>The title of challenge 3 page is re, maybe this is another hint telling me to use re package?
``` python</p>

<blockquote><blockquote><blockquote><p>import urllib2
data = urllib2.urlopen(&ldquo;<a href="http://www.pythonchallenge.com/pc/def/equality.html">http://www.pythonchallenge.com/pc/def/equality.html</a>&rdquo;)
data = data.read()
print &ldquo;&rdquo;.join(re.findall(&ldquo;[^A-Z][A-Z]{3}([a-z])[A-Z]{3}[^A-Z]&rdquo;, data))
linkedlist
```</p></blockquote></blockquote></blockquote>

<p>[^A-Z] matches any single character not in it</p>

<p>[A-Z]{3} matches three UPPERCASE characters</p>

<p>Next challenge is <a href="http://www.pythonchallenge.com/pc/def/linkedlist.html">linkedlist</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Challenge 2]]></title>
    <link href="http://blog.bujiang.info/blog/2014/08/17/python-challenge-2/"/>
    <updated>2014-08-17T14:47:57+08:00</updated>
    <id>http://blog.bujiang.info/blog/2014/08/17/python-challenge-2</id>
    <content type="html"><![CDATA[<p>Challenge 2. ocr</p>

<p>After finish load the <a href="http://www.pythonchallenge.com/pc/def/ocr.html">webpage</a>, there are a blurry picture and a paragraph
<blockquote><p>recognize the characters. maybe they are in the book,<br/>but MAYBE they are in the page source.</p></blockquote></p>

<p>Perhaps the answer contain in the page source code, so I open terminal and in python interactive mode.
``` python</p>

<blockquote><blockquote><blockquote><p>import urllib2
dir(urllib2)
[&lsquo;AbstractBasicAuthHandler&rsquo;, &lsquo;AbstractDigestAuthHandler&rsquo;, &lsquo;AbstractHTTPHandler&rsquo;, &lsquo;BaseHandler&rsquo;, &lsquo;CacheFTPHandler&rsquo;, &lsquo;FTPHandler&rsquo;, &lsquo;FileHandler&rsquo;, &lsquo;HTTPBasicAuthHandler&rsquo;, &lsquo;HTTPCookieProcessor&rsquo;, &lsquo;HTTPDefaultErrorHandler&rsquo;, &lsquo;HTTPDigestAuthHandler&rsquo;, &lsquo;HTTPError&rsquo;, &lsquo;HTTPErrorProcessor&rsquo;, &lsquo;HTTPHandler&rsquo;, &lsquo;HTTPPasswordMgr&rsquo;, &lsquo;HTTPPasswordMgrWithDefaultRealm&rsquo;, &lsquo;HTTPRedirectHandler&rsquo;, &lsquo;HTTPSHandler&rsquo;, &lsquo;OpenerDirector&rsquo;, &lsquo;ProxyBasicAuthHandler&rsquo;, &lsquo;ProxyDigestAuthHandler&rsquo;, &lsquo;ProxyHandler&rsquo;, &lsquo;Request&rsquo;, &lsquo;StringIO&rsquo;, &lsquo;URLError&rsquo;, &lsquo;UnknownHandler&rsquo;, &lsquo;<strong>builtins</strong>&rsquo;, &lsquo;<strong>doc</strong>&rsquo;, &lsquo;<strong>file</strong>&rsquo;, &lsquo;<strong>name</strong>&rsquo;, &lsquo;<strong>package</strong>&rsquo;, &lsquo;<strong>version</strong>&rsquo;, &lsquo;<em>cut_port_re&rsquo;, &lsquo;</em>opener&rsquo;, &lsquo;<em>parse_proxy&rsquo;, &lsquo;</em>safe_gethostbyname&rsquo;, &lsquo;addinfourl&rsquo;, &lsquo;base64&rsquo;, &lsquo;bisect&rsquo;, &lsquo;build_opener&rsquo;, &lsquo;ftpwrapper&rsquo;, &lsquo;getproxies&rsquo;, &lsquo;hashlib&rsquo;, &lsquo;httplib&rsquo;, &lsquo;install_opener&rsquo;, &lsquo;localhost&rsquo;, &lsquo;mimetools&rsquo;, &lsquo;os&rsquo;, &lsquo;parse_http_list&rsquo;, &lsquo;parse_keqv_list&rsquo;, &lsquo;posixpath&rsquo;, &lsquo;proxy_bypass&rsquo;, &lsquo;quote&rsquo;, &lsquo;random&rsquo;, &lsquo;randombytes&rsquo;, &rsquo;re', &lsquo;request_host&rsquo;, &lsquo;socket&rsquo;, &lsquo;splitattr&rsquo;, &lsquo;splithost&rsquo;, &lsquo;splitpasswd&rsquo;, &lsquo;splitport&rsquo;, &lsquo;splittag&rsquo;, &lsquo;splittype&rsquo;, &lsquo;splituser&rsquo;, &lsquo;splitvalue&rsquo;, &lsquo;sys&rsquo;, &lsquo;time&rsquo;, &lsquo;toBytes&rsquo;, &lsquo;unquote&rsquo;, &lsquo;unwrap&rsquo;, &lsquo;url2pathname&rsquo;, &lsquo;urlopen&rsquo;, &lsquo;urlparse&rsquo;, &lsquo;warnings&rsquo;]
page = urllib2.urlopen(&ldquo;<a href="http://www.pythonchallenge.com/pc/def/ocr.html">http://www.pythonchallenge.com/pc/def/ocr.html</a>&rdquo;)
dir(page)
[&lsquo;<strong>doc</strong>&rsquo;, &lsquo;<strong>init</strong>&rsquo;, &lsquo;<strong>iter</strong>&rsquo;, &lsquo;<strong>module</strong>&rsquo;, &lsquo;<strong>repr</strong>&rsquo;, &lsquo;close&rsquo;, &lsquo;code&rsquo;, &lsquo;fileno&rsquo;, &lsquo;fp&rsquo;, &lsquo;getcode&rsquo;, &lsquo;geturl&rsquo;, &lsquo;headers&rsquo;, &lsquo;info&rsquo;, &lsquo;msg&rsquo;, &lsquo;next&rsquo;, &lsquo;read&rsquo;, &lsquo;readline&rsquo;, &lsquo;readlines&rsquo;, &lsquo;url&rsquo;]
page = page.read()
```
urllib2 is python package that can open url (make request), but I can not remember exactly the function to access.</p></blockquote></blockquote></blockquote>

<p>By use dir(urllib2) it shows has urlopen which is
needed one.</p>

<p>Ater I printed out the source code of the webpage, it mess up with a bunch of puctuation. It seems I am on the wrong track or this puctuations are some ciphertext? After a while, I recheck that paragraph it ask me to recognize the characters, so maybe it need the alphabets.
``` python</p>

<blockquote><blockquote><blockquote><p>charList = []
for i in page:
&hellip;     if i.isalpha():
&hellip;             charList.append(i)
&hellip;
charList = &lsquo;&rsquo;.join(charList)
charList
&lsquo;htmlheadtitleocrtitlelinkrelstylesheettypetextcsshrefstylecssheadbodycenterimgsrcocrjpgbrfontcolorcrecognizethecharactersmaybetheyareinthebookbrbutMAYBEtheyareinthepagesourcecenterbrbrbrfontsizecolorgoldGeneraltipsliUsethehintsTheyarehelpfulmostofthetimesliliInvestigatethedatagiventoyouliliAvoidlookingforspoilerslibrForumsahrefhttpwwwpythonchallengecomforumsPythonChallengeForumsareadbeforeyoupostbrIRCircfreenodenetpythonchallengebrbrToseethesolutionstothepreviouslevelreplacepcwithpcciegotohttp</p></blockquote></blockquote></blockquote>

<p>wwwpythonchallengecompccdefocrhtmlbodyhtmlfindrarecharactersinthemessbelowequality'
```</p>

<p>I find the tail of the whole string, it got &ldquo;python challenge&rdquo;, &ldquo;body html&rdquo;, &ldquo;find&rdquo;, it seems interesting.
I open the source code of webpage in browser
``` html</p>

<!--
find rare characters in the mess below:
-->




<!--
Inside this comment mess up with a bunch of puctuation
-->


<p>```</p>

<p>Combine with &ldquo;findrarecharactersinthemessbelowequality&rdquo;, I got the answer &ldquo;equality&rdquo;</p>

<p>So next challenge is <a href="http://www.pythonchallenge.com/pc/def/equality.html">equality.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Challenge 0 - 1]]></title>
    <link href="http://blog.bujiang.info/blog/2014/08/15/python-challenge-0-1/"/>
    <updated>2014-08-15T18:40:45+08:00</updated>
    <id>http://blog.bujiang.info/blog/2014/08/15/python-challenge-0-1</id>
    <content type="html"><![CDATA[<p>Challenge 0. Warming up</p>

<p><a href="http://www.pythonchallenge.com/pc/def/0.html">http://www.pythonchallenge.com/pc/def/0.html</a></p>

<p>The webpage contain a picture and show 2 to the power of 38, beneath the picture has a
hint &ldquo;try to change the URL address.&rdquo;
This is a python challenge, so I open python in interactive mode, then calculate
the answer.
``` bash</p>

<blockquote><blockquote><blockquote><p>2**38
274877906944
```</p></blockquote></blockquote></blockquote>

<p>replace the 0 to result then get the next stage URL is <a href="http://www.pythonchallenge.com/pc/def/274877906944.html">http://www.pythonchallenge.com/pc/def/274877906944.html</a></p>

<p>Challenge 1. What about making trans?</p>

<p>In webpage there have one picture and one paragraph. The picture show K->M O->Q E->G, and
the paragraph looks like have some meaning but for now I do not know it.
I guess it probably is a caesar cipher. So in terminal(shell) I type man ascii to do
a quick check to confirm my guess. &lsquo;K&rsquo;, &lsquo;O&rsquo;, &lsquo;E&rsquo; are all shift by two positions.
Then I write a shift function to decrypt it.
``` python</p>

<h1>!/usr/bin/env python</h1>

<p>def change(ciphertext):</p>

<pre><code>plaintext = []
for i in ciphertext:
    if i == ' ':
        plaintext.append(' ')
    elif i == '.':
        plaintext.append('.')
    elif i == '(':
        plaintext.append('(')
    elif i == ')':
        plaintext.append(')')
    elif i == '\'':
        plaintext.append('\'')
    else:
        # ASCII lower letter decimal value for a to z is 97 to 122
        value = ord(i) + 2

        if value &gt; 122:
            value = value - 122 + 96
            plaintext.append(chr(value))
        else:
            plaintext.append(chr(ord(i) + 2))
return ''.join(plaintext)
</code></pre>

<p>paragraph = &ldquo;g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.&rdquo;
decodedParagraph = change(paragraph)
print decodedParagraph
```</p>

<p>The result is below
<code>bash
i hope you didnt translate it by hand.
thats what computers are for.
doing it in by hand is inefficient and that's why this text is so long.
using string.maketrans() is recommended.
now apply on the url.
</code></p>

<p>oops, it seems instead of doing lines of coding, it just need a string function.
This stage URL is <a href="http://www.pythonchallenge.com/pc/def/map.html">http://www.pythonchallenge.com/pc/def/map.html</a>
map need to change to ocr, so get next stage URL
<a href="http://www.pythonchallenge.com/pc/def/ocr.html">http://www.pythonchallenge.com/pc/def/ocr.html</a></p>

<p>``` python
ciphertext = &ldquo;map&rdquo;</p>

<p>plaintext = string.maketrans(</p>

<pre><code>"abcdefghijklmnopqrstuvwxyz", "cdefghijklmnopqrstuvwxyzab"
</code></pre>

<p>)</p>

<p>print ciphertext.translate(plaintext)
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generate Alphabet Permutation in Python]]></title>
    <link href="http://blog.bujiang.info/blog/2014/08/12/generatre-alphabet-permutation-in-python/"/>
    <updated>2014-08-12T22:38:04+08:00</updated>
    <id>http://blog.bujiang.info/blog/2014/08/12/generatre-alphabet-permutation-in-python</id>
    <content type="html"><![CDATA[<p>Yesterday I&rsquo;ve find a loophole in my friends website, the API for mobile side registration does not have any human verification functions.
I decide to generate alphabet permutation list for user name and register fake users.</p>

<p>In python standard library have functions for iterators for efficient looping which name is itertools. The itertools have permutation generators.</p>

<p>The permutation function needs two arguments, one is iterable, another one is length like if the iterable is &ldquo;ABC&rdquo; and length is 2 then (A,B) (A,C) (B,A) (B,C) (C,A) (C,B) are results for this functions.
<code>python Generate permutation https://docs.python.org/2/library/itertools.html#itertools.permutations
import itertools
iterable = 'ABC'
length = 2
permutation = itertools.permutations(iterable, length)
permutation = list(permuation)
</code></p>

<p>After generate, inside the python list are tuples not string for user name. We need join alphabet within tuple together. Like (A,B) become &lsquo;AB&rsquo;</p>

<p>``` python
nameList = []                        #Create a empty list
for i in permutation:</p>

<pre><code>nameList.append(''.join(i))      #Join alphabet together and append in namList
</code></pre>

<p>```
The user name list are done, next is register user by use API. That API for registration use form-urlencoded. For simplicity, I decide just use curl construct special POST request.</p>

<p>``` python
TYPE = &ldquo;&lsquo;Content-Type:application/x-www-form-urlencoded&rsquo;&rdquo;
DEVICE = &ldquo; -d &lsquo;device_type=2&amp;user_name=&rdquo;
EMAIL = &ldquo;&amp;email=&rdquo;
EMAILTAIL = &ldquo;%40bujiang.info&amp;password=12345&amp;device_token=&rsquo;&rdquo;
URL = &ldquo; <a href="http://***********.com/*******api/index.php/v1/dp_auth/signup">http://***********.com/*******api/index.php/v1/dp_auth/signup</a>&rdquo;
COMMAND = &ldquo;curl -s -X POST -H &rdquo;</p>

<p>def execmd():</p>

<pre><code>if nameList:
    name = nameList.pop()    #Poped name use for username
    cmd = COMMAND + TYPE + DEVICE + name + EMAIL + name + EMAILTAIL + URL    #Construct command for different username registration
    os.system(cmd)    #Execute command in shell 
</code></pre>

<p>```</p>

<p>The code is modified from original code, original code use multithread for concurrent post request. Those asterisk in code URL for privacy reason.
Another loophole for this registration API is password in plaintext.</p>

<p>*: All test actions are under my friend authorization</p>
]]></content>
  </entry>
  
</feed>
